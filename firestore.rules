rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // 何らかの認証が済んでいるかどうか（匿名認証やSNS認証など）
    function isAnyAuthenticated() {
      return request.auth != null;
    }

    // ユーザーIDの検証も含めて認証済みかどうか（認可）
    // 命名は isMe でも良さそう
    function isUserAuthenticated(userId) {
      return isAnyAuthenticated() && userId == request.auth.uid;
    }

    // NOTE: [重要] POST系のリクエストに対しては確りとバリデーションをかける（Firestoreのエミュレータを用いてテスト実行環境も整備できるとなお良い）
    // 命名は checkCreateUserData も良さそう
    function isValidCreateUserData(data) {
      // 追加できるフィールドは User型 で定義してあるもののみ（参考：https://zenn.dev/k2wanko/articles/3007acaafce03db58989）
      // nameが存在する場合は、文字列且つ30文字以内
      // nameが存在しない場合は左辺のみでreturnされる。存在する場合は右辺のチェックが実行される
      // nullの可能性がある項目(フィールド)には以下のようにルールを設定する
      return data.keys().hasOnly(['name', 'createdAt'])
        && !('name' in data) || (data.name is string && data.name.size() <= 30)
        // serverTimestamp()を使って作成日時等を登録している場合、作成時刻とリクエストした時刻が一致するかを判定
        && request.resource.data.createdAt == request.time;
    }

    // 命名は checkCreateTaskData も良さそう（isValidTaskContentとかも良さそう）
    function isValidCreateTaskData(data) {
      // 追加できるフィールドは Task型 で定義してあるもののみ
      // title:   必須、文字列、30文字以内
      // status:  必須、作成時は"BEFORE_START"固定
      // userId:  必須、リクエストしているユーザーIDと同じ
      // type:    必須、FEATURE/CHORE/BUGの3種類のみ
      // dueDate: 任意、日付型
      // point:   任意、数値、30以内
      return data.keys().hasOnly(['title', 'status', 'userId', 'type', 'dueDate', 'point', 'createdAt'])
        && data.title is string && data.title.size() <= 30
        && data.status is string && data.status.matches("^(BEFORE_START)$")
        && data.userId is string && data.userId == request.auth.uid
        && data.type is string && data.type.matches("^(FEATURE|CHORE|BUG)$")
        && (!('dueDate' in data) || data.dueDate is timestamp)
        && (!('point' in data) || data.point is number && data.point <= 30)
        && request.resource.data.createdAt == request.time;
    }

    // 命名は checkUpdateTaskData も良さそう
    function isValidUpdateTaskData(data) {
      // 追加できるフィールドは Task型 で定義してあるもののみ
      // title:   必須、文字列、30文字以内
      // status:  必須、Task.Status型のみ
      // userId:  必須、リクエストしているユーザーIDと同じ
      // type:    必須、FEATURE/CHORE/BUGの3種類のみ
      // dueDate: 任意、日付型
      // point:   任意、数値、30以内
      return data.keys().hasOnly(['title', 'status', 'userId', 'type', 'dueDate', 'point', 'createdAt'])
        && data.title is string && data.title.size() <= 30
        && data.status is string && data.status.matches("^(BEFORE_START|STARTED|DEV_FINISHED|VER_DEPLOYED|TEST_OK|TEST_NG|RELEASED)$")
        && data.userId is string && data.userId == request.auth.uid
        && data.type is string && data.type.matches("^(FEATURE|CHORE|BUG)$")
        && (!('dueDate' in data) || data.dueDate is timestamp)
        && (!('point' in data) || data.point is number && data.point <= 30)
        && request.resource.data.createdAt == request.time;
    }

    match /users/{userId} {
      allow read: if isUserAuthenticated(userId);
      allow create: if isUserAuthenticated(userId) && isValidCreateUserData(request.resource.data)
    }

    match /tasks/{taskId} {
      allow read: if isUserAuthenticated(request.auth.uid) && resource.data.userId == request.auth.uid;
      allow create: if isUserAuthenticated(request.auth.uid) && isValidCreateTaskData(request.resource.data);
      allow update: if isUserAuthenticated(request.auth.uid) && isValidUpdateTaskData(request.resource.data);
    }

    // 全てのデータの読み書きを許可する
    // match /{document=**} {
    // 	allow read, write: if true;
    // }

    // Firestore便利関数メモ（参考：https://www.youtube.com/watch?v=fwJVdBUKofI）
    // Firebaseの匿名以外の認証をしているかどうか
    // 匿名認証はCookieの削除やAppアンインストールで別ユーザーになりうる
    function isNonAnonymouslyAutenticated() {
      return request.auth != null;
    }

    // function isUserAuthenticated(userId) {
    //   return userId == request.auth.uid;
    // }

    // 既にFirestore側にあるデータ
    function existingData() {
      return resource.data;
    }

    // 今リクエストしているデータ（Request Bodyみたいなもの）
    function incomingData() {
      return request.resource.data;
    }

    // fieldNameをvalue分incrementしているかどうか（ちょっとまだよくわからない）
    function isFieldIncremented(fieldName, value) {
      return (resource == null && request.resource.data[fieldName] == value)
        || request.resource.data[fieldName] == resource.data[fieldName];
    }

    // allowedFieldsにあるfieldに対してのみ書き込みを行なっているか
    function writingToAllowedFields(allowedFields) {
      return allowedFields.has(request.resource.data.keys());
    }

    // rulesを書く中で、パスを繋げるときに便利
    function documentPath(paths) {
      return path([['databases', database, 'documents'].join('/'), paths.join('/')].join('/'));
    }

    function isValidString(text, min, max) {
      return text is string && min <= text.size() && text.size() <= max;
    }

    function isValidNumber(num, min, max) {
      return num is number && min <= num && num <= max;
    }

    function isValidInteger(num, min, max) {
      return num is int && min <= num && num <= max;
    }

    // リクエストユーザーのuserIdが、userIds内に含まれているかどうか
    function isUserInArray(userIds) {
      return request.auth.uid in userIds;
    }

    // リクエストしているユーザーデータがバリデーションを通っているかどうか
    // 参考：https://qiita.com/ryo2132/items/23bd6cba1dab49f6275f
    // 使い方： allow create: if isValidUserData(request.resource.data);
    function isValidUserData(user) {
      return 1 <= user.name.size() && user.name.size() <= 30 // nameは1文字以上30文字以内であること
        && user.gender.matches('male|female|genderDiverse')  // genderは`male`, `female`, `genderDiverse`の3種類だけが選べる
        && 0 <= user.age && user.age <= 150                  // ageは0〜150の数値である
    }

    // 指定したパスのドキュメントを取得する（単一ドキュメントに対するリクエストの場合は10個まで使用可能）
    // 参考：https://yamatooo.blog/entry/2021/03/24/083000
    // 以下の例は、usersコレクションに、firebase authのuidをキーにしてデータを保存している時、authのuidをキーにしてuserドキュメントを取得(get)し、その名前が「太郎」であるときreadを許可するルール
    // allow read: if get(/databases/$(database)/documents/users/${request.auth.uid}).data.name == '太郎';

    // 上の注意点としては以下のように関数化して使おうとしても、「${database}の変数が存在しないよ」と怒られて関数として使えないので、そこだけ注意。
    // function getUserDoc() {
    //   return get(/databases/$(database)/documents/users/${request.auth.uid}); // これは使えない
    // }

    // 指定したパスのドキュメントが存在するかどうかのBool値を取得する
    // 参考：https://yamatooo.blog/entry/2021/03/24/083000
    // allow read: if exists(/databases/$(database)/documents/users/hoge);
  }
}
